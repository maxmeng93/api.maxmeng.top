// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// 用户角色
enum UserRole {
  USER
  MAX
}

// 用户
model User {
  id            String     @id @default(uuid())
  username      String     @unique
  nickname      String?    @default("")
  password      String
  avatar        String?    @default("")
  email         String     @unique
  role          UserRole   @default(USER)
  createTime    DateTime   @default(now())
  updateTime    DateTime   @default(now()) @updatedAt
  lastLoginTime DateTime?
  strategies    Strategy[]
  articles      Article[]
}

// 网格策略
model Strategy {
  id        Int              @id @default(autoincrement())
  name      String
  etfCode   String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @default(now()) @updatedAt
  details   StrategyDetail[]
  trades    StrategyTrade[]
  userId    String
  User      User             @relation(fields: [userId], references: [id])
}

// 网格策略级别
enum StrategyType {
  SMALL
  MIDDLE
  BIG
}

// 网格详情
model StrategyDetail {
  id           Int          @id @default(autoincrement())
  type         StrategyType
  level        Float
  buyPrice     Float
  buyQuantity  Int
  buyAmount    Float
  sellPrice    Float
  sellQuantity Int
  sellAmount   Float
  strategyId   Int
  strategy     Strategy     @relation(fields: [strategyId], references: [id])
}

// 交易类型
enum TradeType {
  BUY
  SELL
}

// 网格交易
model StrategyTrade {
  id         Int       @id @default(autoincrement())
  type       TradeType
  price      Float
  quantity   Int
  amount     Float
  brokerage  Float     @default(0)
  tradeDate  DateTime?
  strategyId Int
  strategy   Strategy  @relation(fields: [strategyId], references: [id])
}

// 文件
model File {
  id        Int      @id @default(autoincrement())
  filename  String
  path      String
  mimetype  String
  size      Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

// 文章
model Article {
  id          String   @id @default(uuid())
  title       String
  content     String   @db.LongText
  summary     String?  @db.Text
  isPublished Boolean  @default(false)
  tags        Tag[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  authorId    String
  author      User     @relation(fields: [authorId], references: [id])

  @@index([authorId])
}

model Tag {
  id       Int       @id @default(autoincrement())
  name     String
  articles Article[]
}
